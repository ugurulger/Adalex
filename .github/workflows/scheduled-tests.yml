name: Scheduled Tests

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Full Test Suite
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        node-version: ['16', '18', '20']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/api/requirements.txt
        pip install pytest pytest-cov pytest-mock responses testcontainers

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Install test dependencies
      run: |
        cd tests
        npm ci

    - name: Run backend tests with coverage
      run: |
        cd backend
        python -m pytest ../tests/backend/ -v --cov=api --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Run frontend tests
      run: |
        cd frontend
        npm run lint
        npm run build

    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports-${{ matrix.python-version }}-${{ matrix.node-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
        retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: full-test-suite

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        pip install -r backend/api/requirements.txt
        pip install locust

    - name: Start backend server
      run: |
        cd backend
        python -m flask --app api/api_endpoint run --host=0.0.0.0 --port=5000 &
        sleep 10

    - name: Run performance tests
      run: |
        # Create a simple performance test script
        cat > performance_test.py << 'EOF'
        import requests
        import time
        import statistics

        def test_api_performance():
            base_url = "http://localhost:5000"
            endpoints = [
                "/api/health",
                "/api/status"
            ]
            
            results = {}
            
            for endpoint in endpoints:
                response_times = []
                for _ in range(10):
                    start_time = time.time()
                    try:
                        response = requests.get(f"{base_url}{endpoint}", timeout=5)
                        response_times.append(time.time() - start_time)
                    except Exception as e:
                        print(f"Error testing {endpoint}: {e}")
                
                if response_times:
                    results[endpoint] = {
                        'avg': statistics.mean(response_times),
                        'min': min(response_times),
                        'max': max(response_times),
                        'count': len(response_times)
                    }
            
            print("Performance Test Results:")
            for endpoint, metrics in results.items():
                print(f"{endpoint}:")
                print(f"  Average: {metrics['avg']:.3f}s")
                print(f"  Min: {metrics['min']:.3f}s")
                print(f"  Max: {metrics['max']:.3f}s")
                print(f"  Requests: {metrics['count']}")
            
            # Fail if any endpoint is too slow
            for endpoint, metrics in results.items():
                if metrics['avg'] > 1.0:  # 1 second threshold
                    raise Exception(f"Performance test failed: {endpoint} is too slow")

        if __name__ == "__main__":
            test_api_performance()
        EOF
        
        python performance_test.py

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-report
        path: performance_test.py
        retention-days: 30

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: full-test-suite

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit safety
        npm install -g audit-ci

    - name: Run Python security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json
        safety check -r backend/api/requirements.txt --json --output safety-report.json

    - name: Run Node.js security audit
      run: |
        cd frontend
        audit-ci --moderate --report --format json --output audit-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          frontend/audit-report.json
        retention-days: 30

  # Dependency Updates Check
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Check Python dependencies
      run: |
        pip install pip-review
        pip-review --local --output-format=json > python-updates.json

    - name: Check Node.js dependencies
      run: |
        cd frontend
        npm outdated --json > ../node-updates.json

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-updates
        path: |
          python-updates.json
          node-updates.json
        retention-days: 30
